npm run test (File name jo bhi specific file ka test krna hai)
describe() - suppose group wise testing krna hua like UI ka alag test case and api wagera ka alag testcase , so dono ka group bana sakte hai with the use of describe 
describe.skip() - so woh ye wale group ko ignore kr dega baki sab run kar dega
describe.only() - so woh sirf issi group ko run karega bakiyo ko ignore kr dega

fireEvent.change = for onChange    

__tests__ - folder name - iske undar chahe kese bhi file name banao wo as a test case wala file he samjh    gea
App.spec.jsx or js also fine

beforeAll() - koi bhi funtion wagera chalana hua before testCase
afterAll() - koi bhi funtion wagera chalana hua after testCase

npm run coverage

test("Function Test", =>{
    expact(handleClick()).toMatch("Hello World")
})

getByRole is for semantic tags

getAllByRole - is Array so suppose first wale me kuch cindition lagana hai so we have to use like thos buttons[1]
for(let i=0; i<checkboxes.lenght i++){
    expect(checkboxes[i]).toBeInTheDocument()
}

data-testid - getByTestId
If we need to customize this id key to Elememnt-Id = configure({data-testid:"Element-Id"})


Negative - expect(btn).not.toHaveClass("btn")

test("", ()=>{
    render=(<App/>)
    const div = screen.getByText("Hello World", {expact:false}) ----- Agar hamra text exact same nhi hai tab , like if its in Capital Case n all
    const div = screen.getByText(/"Hello World"/i) ----- Agar hamra text exact same nhi hai tab , isme abb dynamic values bhi daal sakte hai
    expect(div).toBeInTheDocument
})

Diffrece between getByText and queryByText - queryByText used when we use ternory opeatpr like {true && <h1>Login</h1> : <h1>Logout</h1>} - Ye search krta hai code k under amd getByText Search krta hai sirf present text ko
findByText - if koi chiz kuch time baad aa rahi hai or kuch time baad true ho rahi hai tab hum use krr sakte hai - const div = await screen.getByText("Hello World", {}, {timeout: 4000})

within(el) - Means suppose div k under <h1>Hii</h1> ye keyword hona he chahiye

Diffrece between userEvent and FireEvent - userEvent is a async call
userEvent.setup()
await userEvent.type(btn, "Hello")

act function - Pehle state ko update krta hai then assert krta hai  and yeh bhi async hota hai

Jab kisi component me hum function as props pass krte hai - const testFunction = jest.fn() - render(<App testFunction={testFunction}/>)


debug(), console.log(prettyDOM(container)), logRules(container) - for UI Debugging

MSW
Testing Playground - Best Chrome Extention for Testing
codiumate AI for write test case