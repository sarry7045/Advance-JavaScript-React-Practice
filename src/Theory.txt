1) Can we use React Witout create-react-app  =  Most Probelry No 
   Because for Running React App We need some Setup like = ReactDOM , Babel, WebPack

2) Debouncing - Suppose when user typeying something for search soo when user type complete word then api call and show the result

3) Thortlling - In these case suppose user type one word then api start calling and searching about that one word related product

4) Diffrence Between Promise and async await = Basicallly it's 90% same but, in async/await its wait for the response, when its resolve then it move forward,
   main diffrence is the execution of code.

5) Event Loop - Its checking the callStack everytime , when the callstack is empty , it will take code from task queue and put inside the call stack. 

6) memoization - Here's a simplified explanation of memoization:
When a function is called with certain inputs, the memoization technique checks if the function has already been called with the same inputs before.
If the function has been called before with the same inputs and the result was cached, the cached result is returned instead of executing the function again.
If the function has not been called before with the same inputs, the function is executed, and the result is cached for future use.
The next time the function is called with the same inputs, the cached result is returned directly, avoiding the need to recompute the result.

7) Middleware  - applyMiddleware - Dispatch krne se pehle or koi Action ko bhjene se pehle koi event karna hua so tab hum middleware use krte hai
   Redux thunk - Suppose hame dispatch krne se pehle api se koi data catch krna hai uss situation me hum miidleWare ( thunk ) use krte hai
   In simple terms, the main use of middleware in Redux is to add extra functionality to the process of dispatching actions and updating the state.

8) Unidirectional Data Flow - It means we can pass data from parent to child only; and for child to parent we can use Callback functions or Context API or Redux

9) Async and Defer Script Tag - In Normal case first html is loaded then js load then its execute then again html load
   In Async Case - HTML and JS is loaded together but its stop for execution then agian remaning html is Loaded
   In Defer case - All HTML and JS is loaded together then at the end Execution is statrt

10) CSS sprites - are a technique used to combine multiple small images into a single larger image called a sprite sheet.

11)  Pollyfill - Suppose Kisi object me or aaray me koi prototype avaibale nhi hai but future me wo aane wali hai but officialy launh nhi hua hai, 
     then pollyfill techniq k use se hum khud ek prototype bana sakte hai
     if(!Array.prototype.containes) means jab array me cotaines naam la koi prototype nhi hai tab  

12) use strict uses = Ex: without US num = 10 is fine but with use of US we have to create variable like this (var num = 10)  

13) Reconciliation - So when we update the any component in react , then react checks the which part of component is change , and which part of that component we have to
    update , instead of update the entire page

14) JavaScript Deep Flow - Memory Heap - Store all the task - Call Staclk - Its convert code to the Stack form
     Browser or Web API's - Suppose one image is taking time of 2 min to load - so in this situation Browser convert into the async 
     Callback queue  ot Task queue   - It contains all the task

15) Diffrence betwen Library and FrameWork - In FrameWork flow is already defined and in Libray we have to deside the flow. in one framework k under multiple library ho sakti hai but ek
    libray k under koi framework kabhi nhi ho sakta

16) Props is inmutable - beucase component is not allow to change the props , props is read only

17) React Fragement -React Fragment is a feature in React that allows you to group multiple elements or components together without introducing an additional wrapping element

18) HOC - In simple terms, a Higher-Order Component (HOC) is a function that takes a component and returns a new enhanced component with additional functionality or props.

19) Diffrence between primise.all, allsettled, any , race - All - means jab sabhi promise fullfilled ho jaaye tab he resloved kare , allsettled - ya toh sabhi fullfilled ho ya sabhi reject ho,
    any - usme se koi bhi fullfilled ho jaye toh resloved dedega.

20) Dumb Component - Measn it don's have any state or logic - it only reveive props from parent  , and difrectly show on UI.

21) Mixin in Scss = for mixin technique we have to create file like this (_mixins) , suppose we have to create one style for any div and wo div ka style hume multipe jagah par 
    use krna hai so, hum usse mixin ki madat se bana k , then variable ko import kara k direct use kar sakte hai

22) Extend in scss - 

23) forwardRef - Its same like useRef but if we have to chnagge the ref from parent to child compomnent at that time we use these

24) Pure Compomnent - React.memo() -The main use of a Pure Component in React is to optimize performance by reducing unnecessary re-renders of a component.

25  Why state is not updating immedaitlay - In React, state updates are not applied immediately due to the asynchronous nature of the setState function. 
The main reason for this behavior is to optimize performance and avoid unnecessary re-renders.
Its updates the next render cycle.

26) - HOC is function that takes a component and returns a new compomnent. 

27) pusedo classes - a:hoover , pusedo element p::before

28) Callback hell - In simple terms, callback hell happens when you have a lot of functions that depend on the results of other functions.

29) Temporal Deadzone - It means ki hum let or const ko bina declare kiye upper use nhi kar sakte. 

30) What are the security measure you take while buuld application - Input Validation and Authentication and Authorization, Error Hangling

31) diffrence between promise and async await - Async await is the proimse but its easier to write, Promise hase resloved, reject, and pending - await has resolve and reject,
for Error Hangling - primise - .then .cath, async/await - try cathc  

32) primitive and non primitcve data typoe - primitive - string, number, array, boolean, null, undefined, - non primitive - array , object, function

33) Web Accessibilty - In simple words, web accessibility means creating websites that can be used by everyone, including people with visual, auditory, cognitive, or physical disabilities.
 
34) when the response is sent from server to brower what gets loaded first - HTML, CSS then JavaScript

35) what is IIFs - Suppose function ko niche na execute na krke wahi execiute kara de like 
function sum(a,b){
return a + b;
}
sum
(function sum(a.b){
return a + b;
}())

36) yield: The yield keyword is used in generator functions to pause and resume the execution of the function. Generator functions are special 
    functions that can be paused and resumed during their execution,


37) Code Splitting in react js - In simple words, code splitting is like breaking down a big chunk of code into smaller pieces.

38) what happens if we call setState in render() - Calling setState() within the render() method of a React component can lead to an infinite loop and cause performance issues.

39) Mutable - Means jo chiz hum change or modified kar sake like Array and Object , Inmutable - Jo chiz hum chnage na kar sake like - Props

40) Inine - hieght and widht is not working its automaticaly ficks , Block - starting all element with new line, its accupy the whle lije space
Inline -block - hieght and width is valid and its not occupy the whole space , and its not move to the seconnd line

41) Call by value call by Reference - primitive data types its called by values means its change the both data , and the Reference type its change the both data 
var a =10;
var b = a
b = 0
// b = 0
// a = 10

42) difference between usehsitory useparam usenavigator uselocation in react router

43) use of json.strigify and parse

44) falsy values in JavaScript - null, undefined, 0 , ""

45) React Optimization -
// ReactLazy - Suspense
// useMemo
// useCallback
// React virtualized for data listing
// Error Handling
// Object Chaining - .?
// Try to use useReducer if we need to create more hen 3 useState
// pure comoponent
// memorization

46) Code-Splitting - Code splitting is a technique used to break down a large bundle into smaller

47) Normalization - normalization retains some default styles

48) Resetting - resetting starts from a completely blank slate.

49) same origin policy with Javascript - Like dono he URI ka origin same hona chahiye like - http://www.abc.com/p and http://www.abc.com/t - Succes
http://www.abc.com82/p
http://www.abc.com/p
Shows Error - Because Iska Origin Diffrent hai

50) Canvas Tag = Cavas tag give us to basic container for creating graphics using Javascript

51) Data attribute - We can give every html tags to diffrent diffrent ID's like 
<a href="" data-id="1" data-age="2" id="link"></a>
link.addEventListener("click", function(){
   console.log(this.attribute("data-age))
})
so after click of that every data age will print

52) Geolocation - Its use for the get current location of user using navigator.Geolocation.getCurrentPosition

53 )  HTML tag - <h2>, HTML Element - <h2></h2>

54) <div> </div> vs <span> </span> tag - div tag is block level element means is will take full width and span tag is inline level element it means it occupies only the space it needs
                                   and does not create line breaks.

55) Covert Inline element into block level element - we can use display block

56) SVG and Canvas Tag - Mostley SVG is Clear and In SVG we use Maths and in Canvas we use Javascript for the Design

57) Web Workers - Web Workers allow you to run scripts in the background without blocking the user interface

58) Figure Tag is use for Image container like if we want image and its titlle so we can use inside figure figureCaption

59) Datalist and Select Tags - Data gives the suggestion to select and Select gives only you provide.

60) Custom data validation in html5 - Like Required

61) Img srcset attribute - Means suppose if we want to diifrent diffrent pixel iamge in diff - diff screen.

62) First child and Last Child - Pusedo Classes - Means suppose koi container hai uske under multiple childs hai, soo agar first element pe styling karna hai so we use first:child 
     and last element pe style krna hai so we use last:element

63) ::Before and ::After - Puedo Element - Use for accese any element first child

64) Max-widht and Min-widht - Means suppose koi image kisi div se bahar overflow kar rahi hai, at that time se use this , soo wo automaticaly egjest kar leta hai.

65) CSS Vendor Prefixes - Soo suppose css ki koi koi property kisi kisi browers me nahi chalti, soo us case ne hum Vendor Prefixe techniq use krte hai with the use of @keyFrames

65) @KeyFrames

66) BEM Classes - Give the proper Naming conventions like #header #header-logo #header-content #header-searchbar

67)  With the use of @support tag we can see ki is the brower support some css features or not  

68) useRef - useRef ideal for storing mutable values or references that don't affect the component's rendering or state, it's give the direct acces to DOM

69) Custom Hooks - Custom hooks in React are reusable functions that allow you to encapsulate and share logic between multiple components.

70) Virtual Dom - Its create the 2 copy of main DOM, and if kuch chnages hua compo me then wo dono ko compare karega then update kareag
    Reconciliation is the Process of Virtual DOM, and Doiffing is that Upadted part of Virtual DOM

72) React Portal - Suppose agar koi chiz main root id k bahar likhna hua toh new porta bana k we can use.

73) Page k load hone se pehle if kuch achive krna hai so we use constructor , its also one type of lifecycle method in Class 

74) State Lifting - Means pass data form child to paraent

75) use of callback function inside setState - setState((prev)=> prev + 1)

76) how to validate props in react - We can use TypeScript or prop-types package

77) micro and Macro task - Nomal tasks are Micro task and setTimeout is macro task

78) JSX Bundler || Webpack = - Means its create every page ka ek bundel taki jab bhi koi page render hoo toh woh bundle ko he direct execute karde

79)  Browser Cache - Its store the cache in brower localy, Application store the cache In Mobile Device

80 ) Window and document - document refer the document loaded on the brower and Window refer the brower window or tan 

81) Serive Workers - Basicallly its use for PWA , Running Background Script Process in Browser, Caching Resources: - Means uye cache store krke rakhta hai and user offline hone 
                    pe bhi noficatins n all bhejne ka kaam krta hai

82) Function Currying - Its a function with multiple arguments, Its take a one arguments at the time, and returns new function

83) Justify content and Justify items - Basicaly Content is apply on Parent, and Item is apply for child

84) NextJs 13 Features - TypeScript Support, Automatic Routing, SSR wit use Hook, Turbo Pack, Alt attribute is Required in Image, Don't Need to add <a> </a> tag in Link Tag.

85) Event Delegation - To Stop Event Bubbling

86) Synthetic Events - onClick, onChange

87) React-Fiber - Its break down the rendering into smaller parts and also Improved Asynchronous Rendering.

88)<button onClick={handleClick}></button>
   <button onClick={()=> handleClick()}></button> - We use this for , suppose we have to paas any arguments with the function.

89) Why the promise is run before the set timeout - Because the promise is micro task and setTimeout or setInterval is macro task , and macro task is always runs in the last.


90) CI/CD - Azure - Continues Inegration , Continues Development

91) DevOps -Jenkins ,Dockers, Azure - 

92) ES5 - map , filter , reduce , forEach, JSON.parse, JSON.stringify , ES7 - Includes, ES8 - Async/await, Object.values , entries

93) Saga and Thunk - Middleware use for mostly API Calling from Action  - Saga takes the data from action and then move to reducer side, Suppose our data is commign late from API 

94) Implicit - Automatic Action , Explicit - Koi chiz hum define krne k baad chale

95) LocalStorage , SessionStorage , Cookies - Cookies is les storage capacity and clear after some time.

96) Undefined, Null, Not Defined - When a variable is declared but not assigned, Empty Value, variable that has not been declared or is not in the current scope

97) _proto_ and prototype - _proto_ is use for any object or array proto and prototype is use for constructor function

98) example of imutable object - const person = {
  name: "John",
  age: 30,
};
person.name = "Jane";

99) can we have multiple store in reducx - No, Redux typically follows a single store pattern. 

100) Pure function - same output for the same input and has no side effects.

101) delete keyword works only for some key in object 

102) Json Web Token - Its use for Authentication, Authorization, for Multiple User Login Case

103) Rem Em and Px = Suppose we have parenrt size 10px and after that we gave 2rem so its 20px and default size is 16px
Rem refer to the parent and em is refer to the nearest container.

104) Graph-QL - Suppose backend sending us 100 datas, but we need only 10 from that so that remaning 90 data's are 
                unnecessary comming and it's takes unnecessary time and cost. Graph-QL send's only required data to Frontend.

105) CI-CD (Jenkins-Azure Pipelines, Github Actions) - Supposes we deside one time for Deployment , 
            so uss time pe hum users ko bol nhi sakte ki aap log ruko me deploy kar leta hu,
            CI-CD techniq se hum user's k use krte krte bhi production pe deploy kar sakte hai.
            CI-CD Tools build files ko he recheck krta hai , if usme kuch problem hua toh Build fail karr deta hai.

106) Kubernetes - It's handle or manage the multiple container for Server

107) Monolith vs MicroServices - One Big Project - Project with Small Small Parts

108) Prometheus - It Gives the A to Z details of Our Server, Kitne der server chala kitne errors aaye n all





const myNumber = [1,5,6,3,2,7,8,2,5,3];
Find Repeted Value

React functionality - Add Delete , 2 data Changes with 1 state and 1 function

const a =[ 4,5,6,7,4,8,9,7]
output [[4,4], [5], [6], [7,7] [8], [9] ]

reverse string                     +
write the logic to move all 0 move to end of the array
missign number from array
count multple strign              +
find second highest value from array    + 
print nested array to noraml aaray     
find the duplicated number from array 

const arr = [1, 2, 3, 4, 5, 7] 
const arr1 = [5, 6, 7, 8, 9] 
output - [1,2,3,4,6,8,9] Remove duplicate

const string = "Hii My Name is Suraj"
find longest String
output - Suraj